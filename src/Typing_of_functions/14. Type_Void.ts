// Использование типа Void

const numbers14 = [1, 2, 3];
const result14:any = [];

//numbers1.forEach((n) => result.push(n));

/*Метод push() возвращает новую длину массива. Если бы forEach() требовал от 
колбека возврат undefined, то такой код привел бы к ошибке компиляции. 
Его пришлось бы переписать, например, так:
*/

// Теперь колбек ничего не возвращает,
// соответственно, результат вызова undefined
/*numbers14.forEach((n) => {
  result.push(n);
});
*/
/*
Чтобы не писать такой код, и был введен void. 
Он позволяет возвращать любые данные, но делает так, что их использование бессмысленно.

Мы можем определить тип функции, который возвращает void, и использовать его для типизации переменной:
*/
type VoidFunc = () => void;

// Тип функции определяется через контекст
// присваивания ее переменной с типом VoidFunc
const f: VoidFunc = () => true;

const v = f();
//------------------------------------------------------------------------------------------------

function forEach(arr: number [], callback: (n: number, index?:any) => void): void {
arr.forEach((n, index) => callback(n, index));
}

forEach([1, 2, 3], (n) => console.log(n));
// 1
// 2
// 3

const result = [];
forEach([1, 2, 3], (n) => result.push(n));
// [1, 2, 3]

forEach([8, 9], (n, index) => console.log(index + n));
// 8
// 10